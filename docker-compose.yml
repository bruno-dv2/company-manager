version: '3.9'
# Configurações comuns que podem ser reutilizadas
x-common-backend: &common-backend
  networks:
    - app-network
  restart: always
  depends_on:
    postgres:
      condition: service_healthy

x-common-frontend: &common-frontend
  networks:
    - app-network
  restart: always

services:
  # Base de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "${POSTGRES_PORT}:5432"

  # Backend - NestJS (Desenvolvimento)
  backend-dev:
    <<: *common-backend
    build:
      context: ./backend
    ports:
      - "${BACKEND_PORT}:3001"
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}?schema=public
      - JWT_SECRET=${JWT_SECRET}
      - PORT=3001
      - NODE_ENV=development
    volumes:
      - ./backend:/app
      - /app/node_modules
    profiles:
      - dev

  # Backend - NestJS (Produção)
  backend-prod:
    <<: *common-backend
    build:
      context: ./backend
    expose:
      - "3001"
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}?schema=public
      - JWT_SECRET=${JWT_SECRET}
      - PORT=3001
      - NODE_ENV=production
      - ALLOWED_ORIGINS=http://localhost:8080,https://seusite.com
    deploy:
      resources:
        limits:
          memory: 1G
    profiles:
      - prod

  # Frontend - React (Desenvolvimento)
  frontend-dev:
    <<: *common-frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_PORT}:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:${BACKEND_PORT}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm start
    profiles:
      - dev

  # Frontend - React (Produção)
  frontend-prod:
    <<: *common-frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    expose:
      - "80"
    environment:
      - REACT_APP_API_URL=/api
    volumes:
    - ./nginx.conf:/etc/nginx/conf.d/default.conf
    profiles:
      - prod

  # Nginx - Proxy Reverso (apenas para produção)
  nginx:
    image: nginx:alpine
    ports:
      - "${NGINX_PORT}:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend-prod
      - frontend-prod
    networks:
      - app-network
    restart: always
    profiles:
      - prod

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data: